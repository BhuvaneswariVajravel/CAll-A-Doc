#!/bin/bash
set -e
# Do not remove !!!

echo "Parse variables"

export PACKAGE_ID="*"
export OUTPUT_FILE=""
export SCRIPTS_DIR="`dirname $0`"
export BUILD_CONFIG="--release"
export SHOULD_INSTALL_CLI=true
export WEBPACK=false
export SHOUDL_INCLUDE_PLATFORM=false
export SHOULD_CLEAN_WORKSPACE=false;
export SHOULD_CLEAN_APP=false;
export HELP=false;
export SHOULD_RUN_TSC=false
export APP_DIR="./"

while [ "$1" != "" ]; do
    case $1 in
        --appDir ) shift
                    APP_DIR=$1;;
        --packageId ) shift
                   PACKAGE_ID=$1;;
        --outFile ) shift
                   OUTPUT_FILE=$1;;
        -b | --branch ) shift
                   BRANCH=$1;;
        --tns-ios ) shift
                    TNS_IOS=$1;;
        --tns-android ) shift
                    TNS_ANDROID=$1;;
        --build-config ) shift
                    BUILD_CONFIG="--"$1;;
        -g )
                    ISGLOBAL=-g;;
        --webpack )
                    WEBPACK=true;;
        --no-cli )
                    SHOULD_INSTALL_CLI=false;;
        --clean-workspace )
                    SHOULD_CLEAN_WORKSPACE=true;;
        --clean-app )
                    SHOULD_CLEAN_APP=true;;
        --run-tsc )
                    SHOULD_RUN_TSC=true;;
        --help )
                    HELP=true;;

    esac
    shift
done
APP_DIR=$(echo $(node ${SCRIPTS_DIR}/get-absolute-path.js --path ${APP_DIR}))
echo "Full app directory: ${APP_DIR}"

echo "Available commands:
        --appDir            ---> Application absolute path directory: ${APP_DIR}
        --packageId         ---> PackageId that is expected to be reproduced after build: ${PACKAGE_ID}
        --outFile           ---> Output file. Name of the zipped file: ${OUTPUT_FILE}
        --tns-ios           ---> IOS platform: ${TNS_IOS}
        --tns-android       ---> Android platform: ${TNS_ANDROID}
        -b | --branch       ---> Branch: ${BRANCH}
        --build-config      ---> BUILD_CONFIG: ${BUILD_CONFIG}
        -g                  ---> SHOULD INSTALL GLOBAL: ${ISGLOBAL}
        --webpack           ---> ${WEBPACK}
        --no-cli            ---> SHOULD INSTALL CLI: ${SHOULD_INSTALL_CLI}
        --clean-workspace   ---> Default value is false. To use it set --clean-workspace: ${SHOULD_CLEAN_WORKSPACE}
        --clean-app         ---> Default value is false. To use it set --clean-app: ${SHOULD_CLEAN_APP}
        --run-tsc           ---> Run ${APP_DIR}/node_modules/.bin/tsc: ${SHOULD_RUN_TS}
        --help              ---> Show options: ${HELP}"

if [[ ${HELP} == true ]]; then
    exit 1
fi

if [ ${SHOULD_CLEAN_WORKSPACE} == true ]; then
    sh ${SCRIPTS_DIR}/clean-workspace.sh ${APP_DIR}
fi

if [ ${SHOULD_CLEAN_APP} == true ]; then
    sh ${SCRIPTS_DIR}/clean-app.sh ${APP_DIR}
fi

if [ ${SHOULD_INSTALL_CLI} == true ]; then
    sh ${SCRIPTS_DIR}/install-cli.sh -b ${BRANCH} ${ISGLOBAL}
fi

# path
export TNS_PATH=$PWD/node_modules/.bin
export NS_PATH=$PWD/node_modules/nativescript/bin
export PATH=$NS_PATH:$NS_PATH:$PATH
TNS=tns

if [[ -n "${TNS_IOS}" ]]; then
    SHOUDL_INCLUDE_PLATFORM=false
    if [[ ${TNS_IOS} == *".tgz" ]]; then
        TNS_IOS=$(echo $(node ${SCRIPTS_DIR}/get-absolute-path.js --path ${TNS_IOS}))
        echo  ${TNS_IOS}
        ( cd ${APP_DIR} && ${TNS} platform add ios --framework-path ${TNS_IOS} )
    else
        ( cd ${APP_DIR} && ${TNS} platform add ios@${TNS_IOS} )
    fi
fi

if [[ -n "${TNS_ANDROID}" ]]; then
    SHOUDL_INCLUDE_PLATFORM=false
    if [[ $TNS_ANDROID == *".tgz" ]]; then
        TNS_ANDROID=$(echo $(node ${SCRIPTS_DIR}/get-absolute-path.js --path ${TNS_ANDROID}))
        echo  ${TNS_ANDROID}
        ( cd ${APP_DIR} && tns platform add android --framework-path ${TNS_ANDROID} )
    else
        ( cd ${APP_DIR} && tns platform add android@${TNS_ANDROID} )
    fi
fi

# npm install
echo "cd ${APP_DIR} && npm install"
( cd ${APP_DIR} && npm install )

if [[ ${SHOULD_RUN_TSC} == true ]]; then
       ${APP_DIR}/node_modules/.bin/tsc -p  ${APP_DIR} --skipLibCheck
fi

#(cd ${APP_DIR} && npm install)
sh ${SCRIPTS_DIR}/cat-package-json-files.sh ${APP_DIR}

# nativescript-angular
if [ -f ${APP_DIR}/node_modules/.bin/update-app-ng-deps ] ; then
    echo "Upgrading angular dependencies..."
    "${APP_DIR}/node_modules/.bin/update-app-ng-deps"
    (cd "${APP_DIR}" && npm install)
fi

# if outPut is not set, then we get the output=packageId
if [ -z "$OUTPUT_FILE" ]; then
    OUTPUT_FILE=${PACKAGE_ID}
fi

PACKAGE_ID=${PACKAGE_ID}$(echo $(echo ${BUILD_CONFIG} | sed 's/--/-/'))
echo "Full package id: ${PACKAGE_ID}"

RELEASE_ARGS=(--keyStorePath ~/keystore/Telerik.keystore --keyStorePassword t3l3r1kad --keyStoreAlias Telerik --keyStoreAliasPassword t3l3r1kad ${BUILD_CONFIG})
echo ${RELEASE_ARGS[@]}

# webpack
if [[ ${WEBPACK} == false ]]; then
    echo "WEBPACK=false";

    echo "Output directory before building application"
    echo $PWD/out/${OUTPUT_FILE}

    ${TNS} build android ${RELEASE_ARGS[@]} --path ${APP_DIR}
    echo "Build android command: ${TNS} build android ${RELEASE_ARGS[@]} --path ${APP_DIR}"
else
    echo "WEBPACK=true";

    echo "Adding Webpack ..."
    cd $APP_DIR
    # Add platform as:
    # - npm install does not bring it on
    # - npm scripts for webpack does not install it as `${TNS} prepare` does
    if [[ ${SHOUDL_INCLUDE_PLATFORM} == false ]]; then
        ${TNS} platform add android@next
    fi
    npm install --save-dev nativescript-dev-webpack@next
    npm install

    ./node_modules/.bin/update-ns-webpack

    echo "Building for release with uglify and snapshot ..."
    npm run build-android-bundle --uglify --snapshot -- "${RELEASE_ARGS[@]}"
    cd ..
fi

echo "List of builded packages: ls -la ${APP_DIR}/platforms/android/build/outputs/apk/"
ls -la "${APP_DIR}/platforms/android/build/outputs/apk/"

echo "Copy builded packages: cp ${APP_DIR}/platforms/android/build/outputs/apk/${PACKAGE_ID}.apk $PWD/out/${OUTPUT_FILE}-release.apk"
cp ${APP_DIR}/platforms/android/build/outputs/apk/${PACKAGE_ID}.apk ${PWD}/out/${OUTPUT_FILE}-release.apk

echo "List output directory after copying ${PACKAGE_ID}.apk: ls ${PWD}/out/"
ls ${PWD}/out/ && true

