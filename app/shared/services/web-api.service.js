"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var http_1 = require("@angular/http");
var configuration_1 = require("../configuration/configuration");
require("rxjs/add/operator/map");
var ApplicationSettings = require("application-settings");
var nativescript_loading_indicator_1 = require("nativescript-loading-indicator");
var connectivity_1 = require("connectivity");
var dialogs = require("ui/dialogs");
var router_2 = require("nativescript-angular/router");
var WebAPIService = (function () {
    function WebAPIService(http, configuration, router, rs) {
        this.http = http;
        this.configuration = configuration;
        this.router = router;
        this.rs = rs;
        this.loader = new nativescript_loading_indicator_1.LoadingIndicator();
        this.options = {
            message: 'Loading...',
            progress: 0.65,
            android: {
                indeterminate: true,
                cancelable: false,
                max: 100,
                progressNumberFormat: "%1d/%2d",
                progressPercentFormat: 0.53,
                progressStyle: 1,
                secondaryProgress: 1
            },
            ios: {
                details: "Additional detail note!",
                margin: 10,
                dimBackground: true,
                color: "#000",
                // background box around indicator 
                // hideBezel will override this if true 
                //backgroundColor: "yellow",
                hideBezel: true,
            }
        };
        this.Key = "";
        this.GroupNumber = "";
        this.ExternalMemberId = "";
        this.usertype = "";
        this.APIKey = configuration.APIKey;
        if (ApplicationSettings.hasKey("USER_DEFAULTS")) {
            var usrdata = JSON.parse(ApplicationSettings.getString("USER_DEFAULTS"));
            this.Key = usrdata.Key;
            this.GroupNumber = usrdata.GroupNumber;
            this.usertype = usrdata.AccountType;
            this.ExternalMemberId = usrdata.ExternalMemberId;
            if (ApplicationSettings.hasKey("MEMBER_ACCESS")) {
                this.ExternalMemberId = ApplicationSettings.getString("MEMBER_ACCESS");
            }
        }
    }
    // For Http POST method - To convert application/json to application/x-www-form-urlencoded format
    WebAPIService.prototype.JsonToFormEncoded = function (details) {
        var formBody = [];
        for (var property in details) {
            var encodedKey = encodeURIComponent(property);
            var encodedValue = encodeURIComponent(details[property]);
            formBody.push(encodedKey + "=" + encodedValue);
        }
        formBody = formBody.join("&");
        return formBody;
    };
    // Get Service Types
    WebAPIService.prototype.activate_http = function (user_input) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { APIKey: this.APIKey, FirstName: user_input.FirstName, LastName: user_input.LastName, DOB: user_input.DOB, ExtMemberId: user_input.ExternalMemberId };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.AuthenticationAPI + "Activate", body, options)
            .map(function (response) { return response; });
    };
    // Get Service Types
    WebAPIService.prototype.authenticate_http = function (username, password) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { APIKey: this.APIKey, LoginName: username, Password: password };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.AuthenticationAPI + "Authenticate", body, options)
            .map(function (response) { return response; });
    };
    // Get Service Types
    WebAPIService.prototype.getServiceType_http = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ListName: "ServiceType", Demo: "None" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.InformationAPI + "CodeList_Get", body, options)
            .map(function (response) { return response; });
    };
    // Get Member InformationAPI
    WebAPIService.prototype.getMemberInfo = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.APIKey, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.getMemberDtls + "GetMemberInfo", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.getMemberInfoForImage = function (ExternalId) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.APIKey, GroupNumber: this.GroupNumber, ExternalMemberId: ExternalId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.getMemberDtls + "GetMemberInfo", body, options)
            .map(function (response) { return response; });
    };
    // Get Member Plan Info
    WebAPIService.prototype.getPlanInfo = function (apiname) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.BenefitsAPI + apiname, body, options)
            .map(function (response) { return response; });
    };
    // Get Member Billing Info
    WebAPIService.prototype.getBillingInfo = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.BenefitsAPI + "BillingInfo_Get", body, options)
            .map(function (response) { return response; });
    };
    // Save Biiling Info
    WebAPIService.prototype.saveBillingInfo = function (usr) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Demo: "", CardNumber: usr.CardNumber, ExpMonth: usr.ExpMonth, ExpYear: usr.ExpYear, NameOnCard: usr.NameOnCard, Address1: usr.Address1, Address2: usr.Address2, City: usr.City, State: usr.State, Zip: usr.Zip, Phone: usr.Phone };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.BenefitsAPI + "BillingInfo_Set", body, options)
            .map(function (response) { return response; });
    };
    // Save Insurance Info
    WebAPIService.prototype.saveInsureInfo = function (user) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Demo: "", CarrierName: user.CarrierName, CarrierAddress: user.CarrierAddress, CarrierCity: user.CarrierCity, CarrierState: user.CarrierState, CarrierZip: user.CarrierZip, CarrierPhone: user.CarrierPhone, InsuranceGroupId: user.InsuranceGroupId, InsuranceMemberId: user.InsuranceMemberId, BIN: user.BIN, PCN: user.PCN };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.BenefitsAPI + "InsuranceInfo_Set", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.paymentGateway = function (cardDtls) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Demo: "", PaymentAmount: cardDtls.ConsultFee, CCVCode: cardDtls.CCVCode, ServiceId: cardDtls.ServiceType, Description: "" };
        var body = this.JsonToFormEncoded(input);
        console.log(body);
        return this.http
            .post(this.configuration.BenefitsAPI + "ProcessCCPayment", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.personalInfoSave = function (user) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.APIKey, ExternalMemberId: this.ExternalMemberId, GroupNumber: this.GroupNumber, FirstName: user.FirstName, LastName: user.LastName, DOB: user.DOB, Gender: user.Gender, Address1: user.Address1, Address2: user.Address2, City: user.City, State: user.State, Zip: user.Zip, Phone: user.Phone, Phone2: user.Phone2, TimeZoneId: user.TimeZoneId, Email: user.Email };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.getMemberDtls + "UpdateMemberP2", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.savePrefPhar = function (user) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, PharmacyName: user.PharmacyName, PharmacyId: user.PharmacyId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ScheduleAPI + "Consultation_MembersPreferredPharmacy_Set", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.getCodeList = function (listname) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.APIKey, GroupNumber: this.GroupNumber, ListName: listname, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.InformationAPI + "CodeList_Get", body, options)
            .map(function (response) { return response; });
    };
    // Get members preferred pharmacy
    WebAPIService.prototype.getMembersPreferredPharmacy_http = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ScheduleAPI + "Consultation_MembersPreferredPharmacy_Get", body, options)
            .map(function (response) { return response; });
    };
    //Request Consult
    WebAPIService.prototype.consultationScheduleEmail_http = function (subject, desc) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Subject: subject, Content: desc, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ScheduleAPI + "Consultation_NewEmailRequestSubmit", body, options)
            .map(function (response) { return response; });
    };
    //Consulting History
    WebAPIService.prototype.consulthistorydata = function (pfname, plname, servn, servs, startd, endd, pageNo) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, PhysicianFirstName: pfname, PhysicianLastName: plname, ServiceType: servn, ServiceStatus: servs, ServiceDateStart: startd, ServiceDateEnd: endd, PageNumber: pageNo, ItemCountPerPage: 10, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ConsultHistoryAPI + "ConsultationSearch", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.consulthistoryView = function (itemId) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ConsultationItemId: itemId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ConsultHistoryAPI + "ConsultationDetail_Get", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.followUpOrReply = function (conitemId, sub, cont) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ConsultationItemId: conitemId, Subject: sub, Content: cont, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ConsultHistoryAPI + "ConsultationDetail_FollowUpOrReply", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.consultationRecordAudio = function (itemId) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ActionItemId: itemId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ConsultHistoryAPI + "ConsultationRecording_Get", body, options)
            .map(function (response) { return response; });
    };
    //Scheduled Consults
    WebAPIService.prototype.scheduledconsults = function (pageNo) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, PageNumber: pageNo, ItemCountPerPage: 6, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ConsultHistoryAPI + "ConsultationScheduledList_Get", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.markAsReadOrUnread = function (conitemId, read) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ConsultationItemId: conitemId, MarkAsRead: read, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ConsultHistoryAPI + "ConsultationDetail_StatusUpdate", body, options)
            .map(function (response) { return response; });
    };
    //Pharmacy Search
    WebAPIService.prototype.pharmacySearch = function (pharname, zip, state, city) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, PharmacyName: pharname, Zip: zip, MaxCount: 15, StateAbbrev: state, CityName: city, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ScheduleAPI + "Pharmacy_Search", body, options)
            .map(function (response) { return response; });
    };
    //TO Place Markers in PharmacySearch
    WebAPIService.prototype.getPlaces = function (place) {
        var url = "https://maps.googleapis.com/maps/api/place/textsearch/json?query=" + place + "&key=AIzaSyBT4TkMAGKWiM_Bh9GhbP_lgLqdRaWwUXw";
        return this.http.get(url).map(function (response) { return response.json(); });
    };
    //To Show INBOX List
    WebAPIService.prototype.getInboxList = function (pageNo) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ItemCountPerPage: 8, PageNumber: pageNo, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.InboxAPI + "InboxItemList_Get", body, options)
            .map(function (response) { return response; });
    };
    //Inbox item data
    WebAPIService.prototype.getInboxItemDtls = function (itemId) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ItemId: itemId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.InboxAPI + "InboxItem_Get", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.inboxItemStatusUpdate = function (itemId, opened) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ItemId: itemId, AlreadyOpened: opened, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.InboxAPI + "InboxItem_StatusUpdate", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.changepassword = function (changepwd) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, UserType: this.usertype, Pwd: changepwd.Password, PwdConfirm: changepwd.ConfirmPassword };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.AuthenticationAPI + "ChangePassword", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.followUpList = function (pageNo) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, PageNumber: pageNo, ItemCountPerPage: 8, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ConsultHistoryAPI + "ConsultationFollowUpList_Get", body, options)
            .map(function (response) { return response; });
    };
    // For got password
    WebAPIService.prototype.forgotPassword = function (name, email) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { APIKey: this.APIKey, LoginName: name, Email: email };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.AuthenticationAPI + "ForgotPassword", body, options)
            .map(function (response) { return response; });
    };
    // Fee details
    WebAPIService.prototype.consultationFeeDetails = function (serviceid) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { APIKey: this.APIKey, ExternalMemberId: this.ExternalMemberId, GroupNumber: this.GroupNumber, ServiceId: serviceid };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ConsultHistoryAPI + "GetConsultFee", body, options)
            .map(function (response) { return response; });
    };
    //Personal and life style Get
    WebAPIService.prototype.personalAndLSSummary = function (apiname) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(apiname != 'FamilyMembers_Grid_Get' ? this.configuration.HealthRecordsAPI + apiname : this.configuration.BenefitsAPI + apiname, body, options)
            .map(function (response) { return response; });
    };
    //EMR Complete
    WebAPIService.prototype.getEMRComplete_http = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.HealthRecordsAPI + "EMRComplete_Get", body, options)
            .map(function (response) { return response; });
    };
    //Drug allergies grid get
    WebAPIService.prototype.drugAllergiesGet = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ItemId: 0, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.HealthRecordsAPI + "EMR_DrugAllergy_Grid_Get", body, options)
            .map(function (response) { return response; });
    };
    //Get Medications List
    WebAPIService.prototype.getMedications_http = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ItemId: 0, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.HealthRecordsAPI + "EMR_Medications_Grid_Get", body, options)
            .map(function (response) { return response; });
    };
    //Get Medical Conditions List
    WebAPIService.prototype.getMedicalConditions_http = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ItemId: 0, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.HealthRecordsAPI + "EMR_MedicalCondition_Grid_Get", body, options)
            .map(function (response) { return response; });
    };
    //Get Medical Conditions List
    WebAPIService.prototype.addOrUpdateMedicalConditions_http = function (item) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ItemId: 0, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.HealthRecordsAPI + "EMR_MedicalCondition_Grid_Get", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.gridGetInHealth = function (apiname) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ItemId: 0, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.HealthRecordsAPI + apiname, body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.getFamilyHistory_http = function () {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ItemId: 0, ConditionId: 0, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.HealthRecordsAPI + "EMR_FamilyHistory_Grid_Get", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.setFamilyHistoryCondition_http = function (conditionId, type) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, ConditionId: conditionId, Type: type, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.HealthRecordsAPI + "EMR_FamilyHistory_SetFamilyHistoryCondition", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.launchTwilioVideo = function (serviceId) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new http_1.RequestOptions({ headers: headers });
        var input = { Key: this.Key, GroupNumber: this.GroupNumber, ExternalMemberId: this.ExternalMemberId, PersonServiceRequestId: serviceId, Demo: "" };
        var body = this.JsonToFormEncoded(input);
        return this.http
            .post(this.configuration.ConsultHistoryAPI + "VideoConferenceAuthKey_Get", body, options)
            .map(function (response) { return response; });
    };
    WebAPIService.prototype.convertTime24to12 = function (time24) {
        if (time24 != undefined) {
            time24 = time24.split(' ');
            var time12 = void 0;
            var tmpArr = time24[1].split(':');
            if (+tmpArr[0] == 13) {
                time12 = time24[0] + '  ' + (+tmpArr[0] - 1) + ':' + tmpArr[1] + ':' + tmpArr[2] + ' PM';
            }
            else if (+tmpArr[0] == 0) {
                time12 = time24[0] + '  ' + "11:" + tmpArr[1] + ':' + tmpArr[2] + ' PM';
            }
            else {
                if (+tmpArr[0] == 1) {
                    time12 = time24[0] + '  ' + '12:' + tmpArr[1] + ':' + tmpArr[2] + ' AM';
                }
                else {
                    if (+tmpArr[0] > 13)
                        time12 = time24[0] + '  ' + ((+tmpArr[0] - 13).toString().length > 1 ? (+tmpArr[0] - 13) : "0" + (+tmpArr[0] - 13)) + ':' + tmpArr[1] + ':' + tmpArr[2] + ' PM';
                    else
                        time12 = time24[0] + '  ' + ((+tmpArr[0] - 1).toString().length > 1 ? (+tmpArr[0] - 1) : "0" + (+tmpArr[0] - 1)) + ':' + tmpArr[1] + ':' + tmpArr[2] + ' AM';
                }
            }
            return time12;
        }
        else {
            return "";
        }
    };
    WebAPIService.prototype.netConnectivityCheck = function () {
        var value = true;
        if (connectivity_1.getConnectionType() === connectivity_1.connectionType.none) {
            dialogs.alert({
                message: "You are in offline !!!",
                okButtonText: "Ok"
            });
            value = false;
        }
        return value;
    };
    WebAPIService.prototype.clearCache = function () {
        ApplicationSettings.clear();
    };
    WebAPIService.prototype.logout = function () {
        this.clearCache();
        this.rs.navigate(["/login"], { clearHistory: true });
    };
    return WebAPIService;
}());
WebAPIService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, configuration_1.Configuration, router_1.Router, router_2.RouterExtensions])
], WebAPIService);
exports.WebAPIService = WebAPIService;
//# sourceMappingURL=data:application/json;base64,