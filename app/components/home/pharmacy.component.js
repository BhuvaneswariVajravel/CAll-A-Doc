"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var page_1 = require("ui/page");
var configuration_1 = require("../../shared/configuration/configuration");
var web_api_service_1 = require("../../shared/services/web-api.service");
var nativescript_google_maps_sdk_1 = require("nativescript-google-maps-sdk");
var requestconsult_model_1 = require("./requestconsult.model");
var radside_component_1 = require("../radside/radside.component");
var xml2js = require('nativescript-xml2js');
// PHARMACY
var PharmacyComponent = (function () {
    function PharmacyComponent(page, webapi, router, activatedRoutes) {
        this.page = page;
        this.webapi = webapi;
        this.router = router;
        this.activatedRoutes = activatedRoutes;
        this.preferredPharmacy = {};
        this.requestconsult = new requestconsult_model_1.RequestConsultModel();
        this.mapView = null;
        this.usePreferredPharmacy = true;
        this.placeG = [];
        this.centeredOnLocation = false;
    }
    PharmacyComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.page.actionBarHidden = true;
        var self = this;
        this.radSideComponent.rcClass = true;
        if (this.webapi.netConnectivityCheck()) {
            this.webapi.getMembersPreferredPharmacy_http().subscribe(function (data) {
                xml2js.parseString(data._body, { explicitArray: false }, function (err, result) {
                    if (result.APIResult_PreferredPharmacy.Successful == "true") {
                        self.preferredPharmacy = result.APIResult_PreferredPharmacy.PreferredPharmacy;
                        var pharmacyAddr = [];
                        pharmacyAddr.push(self.preferredPharmacy.PharmacyAddress1 + " " + self.preferredPharmacy.PharmacyCity + ", " + self.preferredPharmacy.PharmacyState + " " + self.preferredPharmacy.PharmacyZip);
                        self.searchPharmacyToPlaceMarkers(pharmacyAddr);
                    }
                    else if (result.APIResult_PreferredPharmacy.Message == "Session expired, please login using MemberLogin screen to get a new key for further API calls") {
                        console.log("LOGOUT DUE SESSION TIME OUT IN PREFFRED PHARMACY --->" + result.APIResult_PreferredPharmacy.Message);
                        self.webapi.logout();
                    }
                    else {
                        console.log("Error in getting preferred pharmacy ");
                    }
                });
            }, function (error) {
                console.log("Error in getting preferred pharmacy.. " + error);
            });
        }
        this.activatedRoutes.queryParams.subscribe(function (params) {
            if (params["REQUEST_CONSULT"] != undefined) {
                _this.requestconsult = JSON.parse(params["REQUEST_CONSULT"]);
                _this.usePreferredPharmacy = _this.requestconsult.SetPreferredPharmacy;
            }
        });
    };
    //Map events
    PharmacyComponent.prototype.onMapReady = function (event) {
        console.log('Map Ready');
        if (this.mapView || !event.object)
            return;
        this.mapView = event.object;
        this.mapView.latitude = 36.778259;
        this.mapView.longitude = -119.417931;
    };
    ;
    PharmacyComponent.prototype.getPharmacyType = function () {
        this.usePreferredPharmacy = !this.usePreferredPharmacy;
    };
    PharmacyComponent.prototype.showNextPage = function () {
        this.requestconsult.SetPreferredPharmacy = this.usePreferredPharmacy;
        if (this.usePreferredPharmacy) {
            this.requestconsult.PharmacyId = this.preferredPharmacy.PharmacyId;
            this.requestconsult.PharmacyName = this.preferredPharmacy.PharmacyName;
            this.requestconsult.PharmacyAddress1 = this.preferredPharmacy.PharmacyAddress1;
            this.requestconsult.PharmacyCity = this.preferredPharmacy.PharmacyCity;
            this.requestconsult.PharmacyState = this.preferredPharmacy.PharmacyState;
            this.requestconsult.PharmacyZip = this.preferredPharmacy.PharmacyZip;
            this.requestconsult.PharmacyPhone = this.preferredPharmacy.PharmacyPhone;
        }
        var navigationExtras = {
            queryParams: {
                "REQUEST_CONSULT": JSON.stringify(this.requestconsult),
            }
        };
        if (this.usePreferredPharmacy && this.requestconsult.FeeDescription == "Free") {
            this.router.navigate(["/billing"], navigationExtras);
        }
        else if (this.usePreferredPharmacy && this.requestconsult.FeeDescription != "Free") {
            this.router.navigate(["/creditcard"], navigationExtras);
        }
        else {
            this.router.navigate(["/searchpharmacy"], navigationExtras);
        }
    };
    PharmacyComponent.prototype.goback = function () {
        var navigationExtras = {
            queryParams: { "REQUEST_CONSULT": JSON.stringify(this.requestconsult) }
        };
        this.router.navigate(["/healthrecords"], navigationExtras);
    };
    PharmacyComponent.prototype.searchPharmacyToPlaceMarkers = function (pharAddrs) {
        var self = this;
        console.log("Search place in map " + pharAddrs.length);
        var searchField = "";
        for (var i = 0; i < pharAddrs.length; i++) {
            searchField = "";
            searchField = pharAddrs[i].split(' ').join('%20');
            this.webapi.getPlaces(searchField).subscribe(function (data) {
                self.placeG = JSON.parse(JSON.stringify(data)).results;
                var marker = new nativescript_google_maps_sdk_1.Marker();
                marker.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(self.placeG[0].geometry.location.lat, self.placeG[0].geometry.location.lng);
                marker.title = self.placeG[0].name;
                marker.snippet = self.placeG[0].formatted_address;
                self.mapView.addMarker(marker);
                //self.mapView.zoom = 50;
                self.centeredOnLocation = true;
            }, function (error) {
                console.log(error);
            });
        }
    };
    return PharmacyComponent;
}());
__decorate([
    core_1.ViewChild(radside_component_1.RadSideComponent),
    __metadata("design:type", radside_component_1.RadSideComponent)
], PharmacyComponent.prototype, "radSideComponent", void 0);
PharmacyComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        templateUrl: "./pharmacy.component.html",
        providers: [configuration_1.Configuration, web_api_service_1.WebAPIService, radside_component_1.RadSideComponent]
    }),
    __metadata("design:paramtypes", [page_1.Page, web_api_service_1.WebAPIService, router_1.Router, router_1.ActivatedRoute])
], PharmacyComponent);
exports.PharmacyComponent = PharmacyComponent;
;
//# sourceMappingURL=data:application/json;base64,