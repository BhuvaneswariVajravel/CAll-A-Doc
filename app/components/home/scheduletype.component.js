"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var page_1 = require("ui/page");
var requestconsult_model_1 = require("./requestconsult.model");
var radside_component_1 = require("../radside/radside.component");
var web_api_service_1 = require("../../shared/services/web-api.service");
var configuration_1 = require("../../shared/configuration/configuration");
// SCHEDULE TYPE
var ScheduleTypeComponent = (function () {
    function ScheduleTypeComponent(page, router, activatedRoutes) {
        this.page = page;
        this.router = router;
        this.activatedRoutes = activatedRoutes;
        this.isScheduleNow = true;
        this.requestconsult = new requestconsult_model_1.RequestConsultModel();
        this.today = new Date();
        this.tSelectedIndex = 0;
        this.timeRange = [];
        this.showError = false;
        this.dtday = this.today.getDate();
        this.dtmonth = this.today.getMonth() + 1; //January is 0!
        this.dtyear = this.today.getFullYear();
        this.timeRange = ["7: 00 AM", "8: 00 AM", "9: 00 AM", "10: 00 AM", "11: 00 AM", "12: 00 AM", "1: 00 PM", "2: 00 PM", "3: 00 PM", "4: 00 PM", "4: 00 PM", "5: 00 PM", "6: 00 PM", "7: 00 PM"];
    }
    ScheduleTypeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.page.actionBarHidden = true;
        this.radSideComponent.rcClass = true;
        this.activatedRoutes.queryParams.subscribe(function (params) {
            if (params["REQUEST_CONSULT"] != undefined)
                _this.requestconsult = JSON.parse(params["REQUEST_CONSULT"]);
            _this.isScheduleNow = _this.requestconsult.ScheduleTimeNow;
            if (!_this.isScheduleNow) {
                var selDate = new Date(_this.requestconsult.ScheduleTimeFuture);
                _this.dtday = selDate.getDate();
                _this.dtmonth = selDate.getMonth() + 1;
                _this.dtyear = selDate.getFullYear();
                for (var i = 0; i < _this.timeRange.length; i++) {
                    if (_this.timeRange[i] == _this.requestconsult.ScheduleTimeRange)
                        _this.tSelectedIndex = i;
                }
            }
        });
    };
    ScheduleTypeComponent.prototype.scheduleTypeOnChange = function () {
        this.isScheduleNow = !this.isScheduleNow;
    };
    ScheduleTypeComponent.prototype.configureDateAndTime = function () {
        var _this = this;
        // console.log("execute");
        setTimeout(function () {
            var datePicker = _this.datePicker.nativeElement;
            datePicker.minDate = _this.today;
        }, 1000);
    };
    ScheduleTypeComponent.prototype.goback = function () {
        var navigationExtras = {
            queryParams: { "REQUEST_CONSULT": JSON.stringify(this.requestconsult) }
        };
        this.router.navigate(["/consultationdetails"], navigationExtras);
    };
    ScheduleTypeComponent.prototype.showNextPage = function () {
        if (this.isScheduleNow) {
            this.showError = false;
            this.requestconsult.ScheduleTimeNow = this.isScheduleNow;
            this.requestconsult.ScheduleTimeFuture = "";
            var navigationExtras = {
                queryParams: { "REQUEST_CONSULT": JSON.stringify(this.requestconsult) }
            };
            this.router.navigate(["/healthrecords"], navigationExtras);
        }
        else if (!this.isScheduleNow) {
            var now = new Date();
            var t = this.selectedTime.split(":");
            var t1 = t[1].split(" "), hours = void 0;
            if (t1[2] == "PM" && !(parseInt(t[0]) == 12)) {
                hours = parseInt(t[0]);
                hours = hours + 12;
            }
            else {
                hours = t[0];
            }
            var sDate = this.getSelectedDate();
            sDate.setHours(hours, 0, 0, 0);
            now.setHours(this.today.getHours(), this.today.getMinutes(), this.today.getSeconds(), this.today.getMilliseconds());
            var datePicker = this.datePicker.nativeElement;
            if (sDate > now) {
                this.showError = false;
                this.requestconsult.ScheduleTimeNow = this.isScheduleNow;
                if (!this.isScheduleNow) {
                    this.requestconsult.ScheduleTimeFuture = this.getSelectedDate();
                    this.requestconsult.ScheduleTimeRange = this.selectedTime;
                }
                var navigationExtras = {
                    queryParams: { "REQUEST_CONSULT": JSON.stringify(this.requestconsult) }
                };
                this.router.navigate(["/healthrecords"], navigationExtras);
            }
            else {
                this.showError = true;
            }
        }
    };
    ScheduleTypeComponent.prototype.getSelectedDate = function () {
        var selectedDate = new Date(this.today.getTime());
        var datePicker = this.datePicker.nativeElement;
        if (datePicker.date != undefined) {
            selectedDate.setDate(datePicker.date.getDate());
            selectedDate.setMonth(datePicker.date.getMonth());
            selectedDate.setFullYear(datePicker.date.getFullYear());
        }
        return selectedDate;
    };
    ScheduleTypeComponent.prototype.onTimeChange = function (args) {
        //console.log(this.timeRange[args.value]);
        this.selectedTime = this.timeRange[args.value];
    };
    return ScheduleTypeComponent;
}());
__decorate([
    core_1.ViewChild("date"),
    __metadata("design:type", core_1.ElementRef)
], ScheduleTypeComponent.prototype, "datePicker", void 0);
__decorate([
    core_1.ViewChild("time"),
    __metadata("design:type", core_1.ElementRef)
], ScheduleTypeComponent.prototype, "timePicker", void 0);
__decorate([
    core_1.ViewChild(radside_component_1.RadSideComponent),
    __metadata("design:type", radside_component_1.RadSideComponent)
], ScheduleTypeComponent.prototype, "radSideComponent", void 0);
ScheduleTypeComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        templateUrl: "./scheduletype.component.html",
        providers: [radside_component_1.RadSideComponent, web_api_service_1.WebAPIService, configuration_1.Configuration]
    }),
    __metadata("design:paramtypes", [page_1.Page, router_1.Router, router_1.ActivatedRoute])
], ScheduleTypeComponent);
exports.ScheduleTypeComponent = ScheduleTypeComponent;
;
//# sourceMappingURL=data:application/json;base64,